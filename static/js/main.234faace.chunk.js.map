{"version":3,"sources":["Pages/Main/styles.ts","Pages/Main/App.tsx","Pages/OnComapny/OnCompany.tsx","Pages/TIL/TIL.tsx","Utils/Router.tsx","Slices/page.ts","store.ts","Hooks/reduxHook.ts","Layouts/Index/styles.ts","Layouts/Index/Header.tsx","Layouts/Index/Layouts.tsx","index.tsx"],"names":["AppStyled","styled","div","App","OnCompany","TIL","Router","exact","path","component","pageSlice","createSlice","name","initialState","pages","api","title","subTitle","reducers","store","configureStore","reducer","page","useSelector","reduxSelector","LayoutsStyled","HeaderStyled","Header","state","className","map","to","Layouts","children","ReactDOM","render","StrictMode","basename","process","document","getElementById"],"mappings":"6MAEaA,EAAYC,IAAOC,IAAV,iD,OCQPC,EAPH,kBACV,cAACH,EAAD,wBCEaI,EAJG,kBAChB,mDCKaC,EANH,kBACV,uCCaaC,EAVA,kBACb,mCACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWN,IACjC,cAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,cAAcC,UAAWL,IAC3C,cAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,OAAOC,UAAWJ,U,gBCgB3BK,EANGC,YAAY,CAC5BC,KAAM,YACNC,aApB2B,CAC3BC,MAAO,CACL,CACEC,IAAK,IACLC,MAAO,QAET,CACED,IAAK,cACLC,MAAO,cAET,CACED,IAAK,OACLC,MAAO,MACPC,SAAU,mBAQdC,SAAU,KAGZ,QCfeC,EATDC,YAAe,CAC3BC,QAAS,CACPC,UCFSC,EAA+CC,ICD/CC,EAAgBxB,IAAOC,IAAV,oEAMbwB,EAAezB,IAAOC,IAAV,sYC0BVyB,EA7BA,WACb,IAAMb,EAAQS,GAAY,SAACK,GAAD,OAAWA,EAAMN,KAAKR,SAEhD,OACE,cAACY,EAAD,UACE,oBAAIG,UAAU,YAAd,SACGf,EAAMgB,KAAK,SAACR,GAAD,OACV,oBAAIO,UAAU,YAAd,SACE,cAAC,IAAD,CAAME,GAAIT,EAAKP,IAAf,SACE,oBAAGc,UAAU,kBAAb,UACGP,EAAKN,MACL,IACAM,EAAKL,UACJ,uBAAMY,UAAU,sBAAhB,kBAEGP,EAAKL,SAFR,iBANuBK,EAAKP,aCE/BiB,EANC,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACd,eAACR,EAAD,WACE,cAAC,EAAD,IACCQ,MCFLC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUjB,MAAOA,EAAjB,SACE,cAAC,IAAD,CAAekB,SAAUC,SAAzB,SACE,cAAC,EAAD,UACE,cAAC,EAAD,YAKRC,SAASC,eAAe,W","file":"static/js/main.234faace.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const AppStyled = styled.div`\n    display: block;\n`;\n","import React from 'react';\nimport { AppStyled } from './styles';\n\nconst App = (): JSX.Element => (\n  <AppStyled>\n    app\n    test\n  </AppStyled>\n);\n\nexport default App;\n","import React from 'react';\n\nconst OnCompany = (): JSX.Element => (\n  <>On Company</>\n);\n\nexport default OnCompany;\n","import React from 'react';\n\nconst TIL = (): JSX.Element => (\n  <div>\n    til\n  </div>\n);\n\nexport default TIL;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport App from '../Pages/Main/App';\nimport OnCompany from '../Pages/OnComapny/OnCompany';\nimport TIL from '../Pages/TIL/TIL';\n\nconst Router = (): JSX.Element => (\n  <>\n    <Switch>\n      <Route exact path='/' component={App} />\n      <Route exact path='/on-company' component={OnCompany} />\n      <Route exact path='/til' component={TIL} />\n    </Switch>\n  </>\n);\n\nexport default Router;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { IPages } from '../Types';\n\nconst initialState: IPages = {\n  pages: [\n    {\n      api: '/',\n      title: 'Home',\n    },\n    {\n      api: '/on-company',\n      title: 'On Company',\n    },\n    {\n      api: '/til',\n      title: 'TIL',\n      subTitle: 'Today I Learn',\n    },\n  ],\n};\n\nconst pageSlice = createSlice({\n  name: 'pageSlice',\n  initialState,\n  reducers: {},\n});\n\nexport default pageSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport page from './Slices/page';\n\nconst store = configureStore({\n  reducer: {\n    page,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import { TypedUseSelectorHook, useDispatch as reduxDispatch, useSelector as reduxSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from '../store';\n\nexport const useSelector: TypedUseSelectorHook<RootState> = reduxSelector;\n\nexport const useDispatch = () => reduxDispatch<AppDispatch>();\n","import styled from '@emotion/styled';\n\nexport const LayoutsStyled = styled.div`\n  @media (min-width: 1080px) {\n  }\n \n`;\n\nexport const HeaderStyled = styled.div`\n  display: block;\n  width: 65%;\n  margin: 25px auto;\n  \n  .menu-list {\n    display: flex;\n    justify-content: space-between;\n  }\n  \n  .menu-item {\n    padding: 7px;\n\n    text-align: center;\n   }\n   \n  .menu-item-title {\n    font-size: 20px;\n    text-shadow: 1px 1px #9e9e9e63;   \n   }\n   \n  .menu-item-sub-title{\n    font-size: 16px;\n  }\n`;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useSelector } from '../../Hooks/reduxHook';\nimport { HeaderStyled } from './styles';\n\nconst Header = (): JSX.Element => {\n  const pages = useSelector((state) => state.page.pages);\n\n  return (\n    <HeaderStyled>\n      <ul className='menu-list'>\n        {pages.map(((page) => (\n          <li className='menu-item' key={page.api}>\n            <Link to={page.api}>\n              <p className='menu-item-title'>\n                {page.title}\n                {' '}\n                {page.subTitle && (\n                  <span className='menu-item-sub-title'>\n                    (&nbsp;\n                    {page.subTitle}\n                    &nbsp;)\n                  </span>\n                )}\n              </p>\n            </Link>\n          </li>\n        )))}\n      </ul>\n\n    </HeaderStyled>\n  );\n};\n\nexport default Header;\n","import React, { ReactNode } from 'react';\nimport Header from './Header';\nimport { LayoutsStyled } from './styles';\n\ninterface Props {\n  children: ReactNode\n}\n\nconst Layouts = ({ children }: Props): JSX.Element => (\n  <LayoutsStyled>\n    <Header />\n    {children}\n  </LayoutsStyled>\n);\nexport default Layouts;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport Router from './Utils/Router';\nimport './index.css';\nimport store from './store';\nimport Layouts from './Layouts/Index/Layouts';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Layouts>\n          <Router />\n        </Layouts>\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}